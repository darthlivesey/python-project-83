name: Python CI with Docker Compose

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      # Добавляем сервис PostgreSQL для тестов
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build and start containers
        run: |
          docker-compose up -d --build
          docker-compose ps

      - name: Wait for database to be ready
        run: |
          docker-compose exec db bash -c 'while ! pg_isready -U postgres; do sleep 1; done; echo "Database ready"'

      - name: Run database migrations
        run: |
          docker-compose exec app python -c "from database import get_conn; \
          conn = get_conn(); \
          cursor = conn.cursor(); \
          cursor.execute('''CREATE TABLE IF NOT EXISTS urls (
                id BIGSERIAL PRIMARY KEY,
                url VARCHAR(255) UNIQUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );'''); \
          cursor.execute('''CREATE TABLE IF NOT EXISTS url_checks (
                id BIGSERIAL PRIMARY KEY,
                url_id BIGINT REFERENCES urls(id) ON DELETE CASCADE,
                status_code INT,
                h1 TEXT,
                title TEXT,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );'''); \
          conn.commit();"

      - name: Run tests
        run: |
          docker-compose exec app pytest -v

      - name: Stop containers
        if: always()
        run: docker-compose down

  sonarqube:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install uv
          make install

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.python.version=3.10
            -Dsonar.sources=.
            -Dsonar.exclusions=**/tests/**,**/venv/**
            -Dsonar.python.xunit.reportPath=test-results.xml