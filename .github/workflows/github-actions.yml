name: Page Analyzer CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 27082005
          POSTGRES_DB: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install python-dotenv uv
        uv pip install -e .[dev]

    - name: Set up environment
      run: |
        echo "DATABASE_URL=postgresql://postgres:27082005@localhost:5432/postgres" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_$(date +%s)" >> $GITHUB_ENV
        echo "FLASK_APP=page_analyzer.app" >> $GITHUB_ENV

    - name: Initialize database
      run: |
        python -c "
        from page_analyzer.database import get_conn
        conn = get_conn()
        try:
            with conn.cursor() as cur:
                cur.execute('DROP TABLE IF EXISTS url_checks, urls CASCADE')
                cur.execute('''
                    CREATE TABLE urls (
                        id BIGSERIAL PRIMARY KEY,
                        url VARCHAR(255) UNIQUE NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                cur.execute('''
                    CREATE TABLE url_checks (
                        id BIGSERIAL PRIMARY KEY,
                        url_id BIGINT REFERENCES urls(id) ON DELETE CASCADE,
                        status_code INT,
                        h1 TEXT,
                        title TEXT,
                        description TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                cur.execute('CREATE INDEX IF NOT EXISTS urls_url_idx ON urls(url)')
                cur.execute('CREATE INDEX IF NOT EXISTS url_checks_url_id_idx ON url_checks(url_id)')
            conn.commit()
            print('Database initialized successfully!')
        except Exception as e:
            print(f'Error initializing database: {e}')
            raise
        finally:
            conn.close()
        "

    - name: Run tests
      run: |
        pytest -v --cov=page_analyzer --cov-report=xml:coverage.xml

    - name: Upload coverage to SonarQube
      uses: codecov/codecov-action@v3

  sonarqube:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install uv
        uv pip install -e .[dev]

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.python.version=3.10
          -Dsonar.sources=page_analyzer
          -Dsonar.tests=tests
          -Dsonar.coverage.exclusions=**/tests/**,**/__init__.py
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.exclusions=**/templates/**,**/static/**
          -Dsonar.test.exclusions=**/venv/**